// <auto-generated />
using System;
using CompareHare.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompareHare.Api.Migrations
{
    [DbContext(typeof(CompareHareDbContext))]
    [Migration("20240107200718_AddManyToManyBack")]
    partial class AddManyToManyBack
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CompareHare.Domain.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("HasBulkDiscounts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasCancellationFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasEnrollmentFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasMonthlyFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasNetMetering")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasRenewable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MaximumMonthLength")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaximumPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("MaximumRenewablePercent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("MinimumMonthLength")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinimumPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("MinimumRenewablePercent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool?>("RequiresDeposit")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StateUtilityIndexHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("StateUtilityIndexId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateUtilityIndexId");

                    b.HasIndex("UserId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.AlertMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlertId")
                        .HasColumnType("int");

                    b.Property<string>("AlertOfferHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StateUtilityIndexId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlertId")
                        .IsUnique();

                    b.HasIndex("StateUtilityIndexId");

                    b.HasIndex("UserId");

                    b.ToTable("AlertMatches");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.AlertMatchUtilityPriceHistory", b =>
                {
                    b.Property<int>("AlertMatchId")
                        .HasColumnType("int");

                    b.Property<int>("UtilityPriceHistoryId")
                        .HasColumnType("int");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("AlertMatchId", "UtilityPriceHistoryId");

                    b.HasIndex("UtilityPriceHistoryId");

                    b.ToTable("AlertMatchUtilityPriceHistories");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.PendingAlertNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlertMatchId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlertMatchId");

                    b.HasIndex("UserId");

                    b.ToTable("PendingAlertNotifications");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.ProductPriceScrapingException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductRetailer")
                        .HasColumnType("int");

                    b.Property<string>("Selector")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TrackedProductId")
                        .HasColumnType("int");

                    b.Property<int>("TrackedProductRetailerId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TrackedProductId");

                    b.HasIndex("TrackedProductRetailerId");

                    b.ToTable("ProductPriceScrapingExceptions");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.ProductRetailerPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float?>("AmountChange")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Footnote")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasScrapingFootnote")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("PercentChange")
                        .HasColumnType("float");

                    b.Property<float?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("PriceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("PriceIsManual")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductRetailer")
                        .HasColumnType("int");

                    b.Property<int>("ProductRetailerPriceHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("TrackedProductId")
                        .HasColumnType("int");

                    b.Property<int>("TrackedProductRetailerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductRetailerPriceHistoryId");

                    b.HasIndex("TrackedProductId");

                    b.HasIndex("TrackedProductRetailerId");

                    b.ToTable("ProductRetailerPrices");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.ProductRetailerPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float?>("AmountChange")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Footnote")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasScrapingFootnote")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("PercentChange")
                        .HasColumnType("float");

                    b.Property<float?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("PriceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("PriceIsManual")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductRetailer")
                        .HasColumnType("int");

                    b.Property<int>("TrackedProductId")
                        .HasColumnType("int");

                    b.Property<int>("TrackedProductRetailerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackedProductId");

                    b.HasIndex("TrackedProductRetailerId");

                    b.ToTable("ProductRetailerPriceHistories");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.StateUtilityIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("LoaderDataIdentifier")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UtilityState")
                        .HasColumnType("int");

                    b.Property<int>("UtilityType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StateUtilityIndices");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.TrackedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TrackedProducts");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.TrackedProductRetailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OtherRetailerDisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PriceSelector")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ProductRetailer")
                        .HasColumnType("int");

                    b.Property<string>("ScrapeUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("TrackedProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackedProductId");

                    b.ToTable("TrackedProductRetailers");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("FirstLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("FullAccessGrantedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordResetToken")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTimeOffset?>("PasswordResetTokenExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.UtilityPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CancellationFee")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnrollmentFee")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FlatRate")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool?>("HasBulkDiscounts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasCancellationFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasEnrollmentFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasMonthlyFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasNetMetering")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasRenewable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasTermEndDate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsIntroductoryPrice")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MonthlyFee")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NetMetering")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OfferId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("OfferUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<float?>("PricePerUnit")
                        .HasColumnType("float");

                    b.Property<string>("PriceStructure")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PriceUnit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float?>("RenewablePercentage")
                        .HasColumnType("float");

                    b.Property<bool?>("RequiresDeposit")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StateUtilityIndexId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierPhone")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("TermEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TermMonthLength")
                        .HasColumnType("int");

                    b.Property<int>("UtilityPriceHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateUtilityIndexId");

                    b.HasIndex("UtilityPriceHistoryId");

                    b.ToTable("UtilityPrices");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.UtilityPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CancellationFee")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnrollmentFee")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FlatRate")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool?>("HasBulkDiscounts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasCancellationFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasEnrollmentFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasMonthlyFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasNetMetering")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasRenewable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("HasTermEndDate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsIntroductoryPrice")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MonthlyFee")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NetMetering")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OfferId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("OfferUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<float?>("PricePerUnit")
                        .HasColumnType("float");

                    b.Property<string>("PriceStructure")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PriceUnit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float?>("RenewablePercentage")
                        .HasColumnType("float");

                    b.Property<bool?>("RequiresDeposit")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StateUtilityIndexId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierPhone")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("TermEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TermMonthLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateUtilityIndexId");

                    b.ToTable("UtilityPriceHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.Alert", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.StateUtilityIndex", "StateUtilityIndex")
                        .WithMany()
                        .HasForeignKey("StateUtilityIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateUtilityIndex");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.AlertMatch", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.Alert", "Alert")
                        .WithOne("AlertMatch")
                        .HasForeignKey("CompareHare.Domain.Entities.AlertMatch", "AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.StateUtilityIndex", "StateUtilityIndex")
                        .WithMany()
                        .HasForeignKey("StateUtilityIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("StateUtilityIndex");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.AlertMatchUtilityPriceHistory", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.AlertMatch", "AlertMatch")
                        .WithMany("UtilityPriceHistories")
                        .HasForeignKey("AlertMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.UtilityPriceHistory", "UtilityPriceHistory")
                        .WithMany("Alerts")
                        .HasForeignKey("UtilityPriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertMatch");

                    b.Navigation("UtilityPriceHistory");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.PendingAlertNotification", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.AlertMatch", "AlertMatch")
                        .WithMany()
                        .HasForeignKey("AlertMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertMatch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.ProductPriceScrapingException", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.TrackedProduct", "TrackedProduct")
                        .WithMany()
                        .HasForeignKey("TrackedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.TrackedProductRetailer", "TrackedProductRetailer")
                        .WithMany()
                        .HasForeignKey("TrackedProductRetailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackedProduct");

                    b.Navigation("TrackedProductRetailer");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.ProductRetailerPrice", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.ProductRetailerPriceHistory", "ProductRetailerPriceHistory")
                        .WithMany()
                        .HasForeignKey("ProductRetailerPriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.TrackedProduct", "TrackedProduct")
                        .WithMany("Prices")
                        .HasForeignKey("TrackedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.TrackedProductRetailer", "TrackedProductRetailer")
                        .WithMany("ProductRetailerPrices")
                        .HasForeignKey("TrackedProductRetailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductRetailerPriceHistory");

                    b.Navigation("TrackedProduct");

                    b.Navigation("TrackedProductRetailer");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.ProductRetailerPriceHistory", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.TrackedProduct", "TrackedProduct")
                        .WithMany("PriceHistories")
                        .HasForeignKey("TrackedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.TrackedProductRetailer", "TrackedProductRetailer")
                        .WithMany("ProductRetailerPriceHistories")
                        .HasForeignKey("TrackedProductRetailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackedProduct");

                    b.Navigation("TrackedProductRetailer");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.Role", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.TrackedProduct", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.TrackedProductRetailer", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.TrackedProduct", "TrackedProduct")
                        .WithMany("Retailers")
                        .HasForeignKey("TrackedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackedProduct");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.UtilityPrice", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.StateUtilityIndex", "StateUtilityIndex")
                        .WithMany()
                        .HasForeignKey("StateUtilityIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.UtilityPriceHistory", "UtilityPriceHistory")
                        .WithMany()
                        .HasForeignKey("UtilityPriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateUtilityIndex");

                    b.Navigation("UtilityPriceHistory");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.UtilityPriceHistory", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.StateUtilityIndex", "StateUtilityIndex")
                        .WithMany()
                        .HasForeignKey("StateUtilityIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateUtilityIndex");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompareHare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CompareHare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.Alert", b =>
                {
                    b.Navigation("AlertMatch")
                        .IsRequired();
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.AlertMatch", b =>
                {
                    b.Navigation("UtilityPriceHistories");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.TrackedProduct", b =>
                {
                    b.Navigation("PriceHistories");

                    b.Navigation("Prices");

                    b.Navigation("Retailers");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.TrackedProductRetailer", b =>
                {
                    b.Navigation("ProductRetailerPriceHistories");

                    b.Navigation("ProductRetailerPrices");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CompareHare.Domain.Entities.UtilityPriceHistory", b =>
                {
                    b.Navigation("Alerts");
                });
#pragma warning restore 612, 618
        }
    }
}
